// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.RecycleRushRobot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.CameraServer;

import org.usfirst.frc810.RecycleRushRobot.commands.*;
import org.usfirst.frc810.RecycleRushRobot.subsystems.*;
import edu.wpi.first.wpilibj.Talon;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    CameraServer server;
    

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSystem driveSystem;
    public static Elevator elevator;
    public static Gripper gripper;
    public static ElevNoPID elevnopid;
    Talon elevcontroller;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    GripOpen gripopen;
    GripClose gripclose;
    ElevatorRun elevatorrun;
    Drive drive;
    

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystem = new DriveSystem();
        elevator = new Elevator();
        gripper = new Gripper();
        elevnopid = new ElevNoPID();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        elevcontroller = new Talon(2);
        autonomousCommand = new AutonomousCommand();
        server = CameraServer.getInstance();
        server.setQuality(50);
        //the camera name (ex "cam0") can be found through the roborio web interface
        server.startAutomaticCapture("cam0");

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        
    	Scheduler.getInstance().run();
        
        
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        gripopen = new GripOpen();
        gripclose = new GripClose();
        elevatorrun = new ElevatorRun();
        drive = new Drive();
        
    }

    /**
     * This function is called periodically during operator control
     */
    
    public void teleopPeriodic() {
    	Scheduler.getInstance().run();
    	
    	double speed;
        speed = oi.getmanipulator().getRawAxis(3) + oi.getmanipulator().getRawAxis(1);
        if (speed > 1) speed = 1;
        if (speed < -1) speed = -1;
        
        
        if (RobotMap.elevatorHighSwitch.get() && (RobotMap.elevatorLowSwitch.get()/* || RobotMap.elevatorWarningSwitch.get()*/)){
        	speed = 0;
        } else if (RobotMap.elevatorLowSwitch.get()){
        	speed = -1;
       // } else if (RobotMap.elevatorWarningSwitch.get()){
      //  	speed = (oi.getmanipulator().getRawAxis(3) / 4);
        } else if (RobotMap.elevatorHighSwitch.get()){
        	speed = 1;
        } else{
        	//speed = speed;
        }
        
        if(speed>0) {
        	elevcontroller.set(.5*speed);
        }
        else if(speed<0) {
        	elevcontroller.set(speed);
        }
        else {
        elevcontroller.set(speed);
        }
        
        if (oi.getmanipulator().getRawButton(6) || oi.getmanipulator().getRawButton(5))
        	gripopen.start();
        else if (oi.getmanipulator().getRawButton(8) || oi.getmanipulator().getRawButton(7))
        	gripclose.start();
        
        drive.start();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
