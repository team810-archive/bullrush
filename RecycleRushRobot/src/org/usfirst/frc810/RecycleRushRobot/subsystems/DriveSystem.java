// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.RecycleRushRobot.subsystems;

import org.usfirst.frc810.RecycleRushRobot.RobotMap;

import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveSystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController backLeft = RobotMap.driveSystemBackLeft;
    SpeedController frontright = RobotMap.driveSystemFrontright;
    SpeedController frontLeft = RobotMap.driveSystemFrontLeft;
    SpeedController backRight = RobotMap.driveSystemBackRight;
    RobotDrive drive = RobotMap.driveSystemDrive;
    AnalogAccelerometer analogAccelerometer1 = RobotMap.driveSystemAnalogAccelerometer1;
    Gyro gyro1 = RobotMap.driveSystemGyro1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  
    double baseangle;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public DriveSystem(){
    	baseangle = 0;
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void autoMode(double x, double y) {
    	double z=0;
    	drive.mecanumDrive_Cartesian(x, -y, z, 0);
    }
    
    public void driveJoystick(Joystick stick){
    	double joystickx = stick.getX();	//Temp storage for values
    	double joysticky = stick.getY();
    	double joystickz = stick.getZ();
    	
    	double limit = 0.2;
    	
    	if (joystickz > 1.0) joystickz = 1.0;
    	if (Math.abs(joystickx) < limit) joystickx = 0;
		if (Math.abs(joysticky) < limit) joysticky= 0;
		if (Math.abs(joystickz) < limit){ 
			joystickz = 0;			
		}else {
			baseangle = gyro1.getAngle();
		}
		
		double modifier;
    	if (stick.getRawButton(1) == true){ 
    		
    		modifier = 0.25;
	
    	}else if(stick.getRawButton(2) == true){
    		modifier = 0.5;
    	}
    	else {
    		
    		modifier = 1.0;
    		
    		
    	}
    	
    	joystickx *= modifier;
    	joysticky *= modifier;
    	joystickz *= modifier;
    	
    	if (stick.getRawButton(1) && stick.getRawButton(2))
    		baseangle = gyro1.getAngle();
    	
    	drive.mecanumDrive_Cartesian(joystickx, joysticky, joystickz, baseangle - gyro1.getAngle());
    }
}

